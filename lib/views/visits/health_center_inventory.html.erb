<% form_tag do %>
<h3><%= current_link.first %></h3>

<%- if !@errors.empty? -%>
<div id="error">
  <ul>
    <%- @errors.each do |key, hash| -%>
      <%- hash.each do |part, errors| -%>
        <%- errors.each_full do |msg| -%>
          <li><%= h msg %></li>
        <%- end -%>
      <%- end -%>
    <%- end -%>
  </ul>
</div>
<%- elsif !@existing_inventory.errors.empty? || !@delivered_inventory.errors.empty?-%>
<div id="error">
  <%= @existing_inventory.errors.full_message unless @existing_inventory.errors.empty? %>
  <%= @delivered_inventory.errors.full_message unless @delivered_inventory.errors.empty? %>
</div>
<%- end -%>

<p class="note"><%= t(".instructions") %></p>

<%- packages = Package.all.reject { |p| p.product.product_type_code == 'test' } -%> 
<%- fields_for :inventory_counts do |f| -%>
<table class="inventory">
  <thead>
    <tr>
      <th><%= t('.product') %></th>
      <th><%= t('.ideal_quantity') %></th>
      <th><%= t('.existing_quantity') %></th>
      <th><%= t('.delivered_quantity') %></th>
      <th><%= t('.spoiled_quantity') %></th>
    </tr>
  </thead>
  <%- packages.partition_by{|package| package.product.product_type_code}.each do |type, stocks| -%>
    <tbody>
      <%- stocks.each do |package| -%>
        <%- index = package.code -%>
        <tr>
          <th><%= package.label %></th>
          <td class="static"><%= h(number_with_delimiter( @stock[:ideal][index] )) if @stock[:ideal][index] %></td>
          <%- existing_stock_value = default_field_value(params[:inventory_counts], index.to_s, :existing, @stock[:existing][index].quantity) -%>
          <%- existing_nr_checked = !@stock[:existing][index].new_record? && default_field_value(params[:inventory_counts], index.to_s, "existing/NR", existing_stock_value.to_s.empty? ? '1' : '0') == '1' -%>
          <%- delivered_stock_value = default_field_value(params[:inventory_counts], index.to_s, :delivered, @stock[:delivered][index].quantity) -%>
          <%- delivered_nr_checked = !@stock[:delivered][index].new_record? && default_field_value(params[:inventory_counts], index.to_s, "delivered/NR", delivered_stock_value.to_s.empty? ? '1' : '0') == '1' -%>
          <%- spoiled_stock_value = nil #default_field_value(params[:inventory_counts], index.to_s, :spoiled, @stock[:spoiled][index].quantity) -%>
          <%- spoiled_nr_checked = false #!@stock[:spoiled][index].new_record? && default_field_value(params[:inventory_counts], index.to_s, "spoiled/NR", spoiled_stock_value.to_s.empty? ? '1' : '0') == '1' -%>
          <td><%= nr_field(f, :existing,  index, existing_stock_value,  existing_nr_checked,  (@errors[index][:existing].on(:quantity) rescue nil)) %></td>
          <td><%= nr_field(f, :delivered, index, delivered_stock_value, delivered_nr_checked, (@errors[index][:delivered].on(:quantity) rescue nil), true) %></td>
          <td><%= nr_field(f, :spoiled,   index, spoiled_stock_value,   spoiled_nr_checked,   (@errors[index][:spoiled].on(:quantity) rescue nil)) if package.product.product_type_code == 'vaccine' %></td>
        </tr>
      <%- end -%>
    </tbody>
  <%- end %>
  </table>

  <% test = Package.all(:include => { :product => :product_type }, :conditions => { 'product_types.code' => 'test' } ) %>

  <table class="inventory">
    <thead>
      <tr>
        <td></td>
        <%- test.each do |package| -%>
          <th class="label"><%= package.label %></th>
        <%- end %>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th><%= t(".ideal_quantity") %></th>
        <%- test.each do |package| -%>
        <td class="static"><%= h(number_with_delimiter( @stock[:ideal][package.code] )) if @stock[:ideal][package.code] %></td>
        <%- end -%>
      </tr>
    
      <% [:existing, :delivered].each do |t| %> 
      <tr>
        <th><%= t(".#{t}_quantity") %></th>
          
        <%- test.each do |package| -%>
          <%- index = package.code -%>
          <%- stock_value = default_field_value(params[:inventory_counts], index.to_s, t, @stock[t][index].quantity) -%>
          <%- nr_checked = !@stock[t][index].new_record? && default_field_value(params[:inventory_counts], index.to_s, "#{t}/NR", stock_value.to_s.empty? ? '1' : '0') == '1' -%>
          <td>
            <%= nr_field(f, t, index, stock_value, nr_checked, (@errors[index][t].on(:quantity) rescue nil)) %>
          </td>
        <%- end -%>
      </tr>
      <%- end -%>
    </tbody>
</table>
<%- end -%>
<%= save_and_continue %>
<%- end -%>
